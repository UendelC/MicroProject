
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000904  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000750  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000477  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000018b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a6  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  88:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configUsart>:
  result[4] = ',';
  result[5] = decimal/10 + 48;
  result[6] = '%';
  result[7] = '\n';
  result[8] = '\0';
}
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a0:	08 95       	ret

000000a2 <configADC>:
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  a8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  ac:	08 95       	ret

000000ae <readLM35>:
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
  b8:	80 81       	ld	r24, Z
  ba:	84 ff       	sbrs	r24, 4
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <readLM35+0xa>
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	90 61       	ori	r25, 0x10	; 16
  ce:	90 83       	st	Z, r25
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	92 2b       	or	r25, r18
  d4:	08 95       	ret

000000d6 <convertToCelsiusStr>:
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	29 ee       	ldi	r18, 0xE9	; 233
  e4:	31 e0       	ldi	r19, 0x01	; 1
  e6:	ac 01       	movw	r20, r24
  e8:	42 9f       	mul	r20, r18
  ea:	c0 01       	movw	r24, r0
  ec:	43 9f       	mul	r20, r19
  ee:	90 0d       	add	r25, r0
  f0:	52 9f       	mul	r21, r18
  f2:	90 0d       	add	r25, r0
  f4:	11 24       	eor	r1, r1
  f6:	bc 01       	movw	r22, r24
  f8:	99 0f       	add	r25, r25
  fa:	88 0b       	sbc	r24, r24
  fc:	99 0b       	sbc	r25, r25
  fe:	28 ee       	ldi	r18, 0xE8	; 232
 100:	33 e0       	ldi	r19, 0x03	; 3
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__divmodsi4>
 10a:	8b 01       	movw	r16, r22
 10c:	e0 e0       	ldi	r30, 0x00	; 0
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	0f 2e       	mov	r0, r31
 112:	f4 e6       	ldi	r31, 0x64	; 100
 114:	ef 2e       	mov	r14, r31
 116:	f1 2c       	mov	r15, r1
 118:	f0 2d       	mov	r31, r0
 11a:	c9 01       	movw	r24, r18
 11c:	b7 01       	movw	r22, r14
 11e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 122:	60 5d       	subi	r22, 0xD0	; 208
 124:	60 83       	st	Z, r22
 126:	ca e0       	ldi	r28, 0x0A	; 10
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	be 01       	movw	r22, r28
 12c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 130:	60 5d       	subi	r22, 0xD0	; 208
 132:	61 83       	std	Z+1, r22	; 0x01
 134:	c9 01       	movw	r24, r18
 136:	be 01       	movw	r22, r28
 138:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 13c:	80 5d       	subi	r24, 0xD0	; 208
 13e:	82 83       	std	Z+2, r24	; 0x02
 140:	8c e2       	ldi	r24, 0x2C	; 44
 142:	83 83       	std	Z+3, r24	; 0x03
 144:	c8 01       	movw	r24, r16
 146:	b7 01       	movw	r22, r14
 148:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 14c:	60 5d       	subi	r22, 0xD0	; 208
 14e:	64 83       	std	Z+4, r22	; 0x04
 150:	be 01       	movw	r22, r28
 152:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 156:	60 5d       	subi	r22, 0xD0	; 208
 158:	65 83       	std	Z+5, r22	; 0x05
 15a:	c8 01       	movw	r24, r16
 15c:	be 01       	movw	r22, r28
 15e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__divmodhi4>
 162:	80 5d       	subi	r24, 0xD0	; 208
 164:	86 83       	std	Z+6, r24	; 0x06
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	87 83       	std	Z+7, r24	; 0x07
 16a:	10 86       	std	Z+8, r1	; 0x08
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <send_>:

void send_(char * mensagem) {
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
  int i = 0;
  while(mensagem[i]) {
 17e:	fc 01       	movw	r30, r24
 180:	20 81       	ld	r18, Z
 182:	22 23       	and	r18, r18
 184:	79 f0       	breq	.+30     	; 0x1a4 <send_+0x2a>
 186:	dc 01       	movw	r26, r24
 188:	11 96       	adiw	r26, 0x01	; 1
    while(!(UCSR0A & (1 << UDRE0))){}
 18a:	e0 ec       	ldi	r30, 0xC0	; 192
 18c:	f0 e0       	ldi	r31, 0x00	; 0
    UDR0 = (unsigned char)mensagem[i];
 18e:	c6 ec       	ldi	r28, 0xC6	; 198
 190:	d0 e0       	ldi	r29, 0x00	; 0
    UCSR0A = 0x40; 
 192:	80 e4       	ldi	r24, 0x40	; 64
}

void send_(char * mensagem) {
  int i = 0;
  while(mensagem[i]) {
    while(!(UCSR0A & (1 << UDRE0))){}
 194:	90 81       	ld	r25, Z
 196:	95 ff       	sbrs	r25, 5
 198:	fd cf       	rjmp	.-6      	; 0x194 <send_+0x1a>
    UDR0 = (unsigned char)mensagem[i];
 19a:	28 83       	st	Y, r18
    UCSR0A = 0x40; 
 19c:	80 83       	st	Z, r24
  result[8] = '\0';
}

void send_(char * mensagem) {
  int i = 0;
  while(mensagem[i]) {
 19e:	2d 91       	ld	r18, X+
 1a0:	21 11       	cpse	r18, r1
 1a2:	f8 cf       	rjmp	.-16     	; 0x194 <send_+0x1a>
    while(!(UCSR0A & (1 << UDRE0))){}
    UDR0 = (unsigned char)mensagem[i];
    UCSR0A = 0x40; 
    i++;
  }
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <main>:

int main(void)
{
  configADC();
 1aa:	0e 94 51 00 	call	0xa2	; 0xa2 <configADC>
  configUsart();
 1ae:	0e 94 48 00 	call	0x90	; 0x90 <configUsart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	83 ed       	ldi	r24, 0xD3	; 211
 1b6:	90 e3       	ldi	r25, 0x30	; 48
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xe>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x18>
 1c2:	00 00       	nop
  //int luminosidade;
  
    while (1) 
    {
      _delay_ms(1000);
      temperatura = readLM35();
 1c4:	0e 94 57 00 	call	0xae	; 0xae <readLM35>
      convertToCelsiusStr(temperatura);
 1c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <convertToCelsiusStr>
      send_(result);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 bd 00 	call	0x17a	; 0x17a <send_>
 1d4:	ee cf       	rjmp	.-36     	; 0x1b2 <main+0x8>

000001d6 <__divmodhi4>:
 1d6:	97 fb       	bst	r25, 7
 1d8:	07 2e       	mov	r0, r23
 1da:	16 f4       	brtc	.+4      	; 0x1e0 <__divmodhi4+0xa>
 1dc:	00 94       	com	r0
 1de:	07 d0       	rcall	.+14     	; 0x1ee <__divmodhi4_neg1>
 1e0:	77 fd       	sbrc	r23, 7
 1e2:	09 d0       	rcall	.+18     	; 0x1f6 <__divmodhi4_neg2>
 1e4:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodhi4>
 1e8:	07 fc       	sbrc	r0, 7
 1ea:	05 d0       	rcall	.+10     	; 0x1f6 <__divmodhi4_neg2>
 1ec:	3e f4       	brtc	.+14     	; 0x1fc <__divmodhi4_exit>

000001ee <__divmodhi4_neg1>:
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <__divmodhi4_neg2>:
 1f6:	70 95       	com	r23
 1f8:	61 95       	neg	r22
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255

000001fc <__divmodhi4_exit>:
 1fc:	08 95       	ret

000001fe <__divmodsi4>:
 1fe:	05 2e       	mov	r0, r21
 200:	97 fb       	bst	r25, 7
 202:	1e f4       	brtc	.+6      	; 0x20a <__divmodsi4+0xc>
 204:	00 94       	com	r0
 206:	0e 94 16 01 	call	0x22c	; 0x22c <__negsi2>
 20a:	57 fd       	sbrc	r21, 7
 20c:	07 d0       	rcall	.+14     	; 0x21c <__divmodsi4_neg2>
 20e:	0e 94 32 01 	call	0x264	; 0x264 <__udivmodsi4>
 212:	07 fc       	sbrc	r0, 7
 214:	03 d0       	rcall	.+6      	; 0x21c <__divmodsi4_neg2>
 216:	4e f4       	brtc	.+18     	; 0x22a <__divmodsi4_exit>
 218:	0c 94 16 01 	jmp	0x22c	; 0x22c <__negsi2>

0000021c <__divmodsi4_neg2>:
 21c:	50 95       	com	r21
 21e:	40 95       	com	r20
 220:	30 95       	com	r19
 222:	21 95       	neg	r18
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	4f 4f       	sbci	r20, 0xFF	; 255
 228:	5f 4f       	sbci	r21, 0xFF	; 255

0000022a <__divmodsi4_exit>:
 22a:	08 95       	ret

0000022c <__negsi2>:
 22c:	90 95       	com	r25
 22e:	80 95       	com	r24
 230:	70 95       	com	r23
 232:	61 95       	neg	r22
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	8f 4f       	sbci	r24, 0xFF	; 255
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	08 95       	ret

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <__udivmodsi4>:
 264:	a1 e2       	ldi	r26, 0x21	; 33
 266:	1a 2e       	mov	r1, r26
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	fd 01       	movw	r30, r26
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__udivmodsi4_ep>

00000270 <__udivmodsi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	ee 1f       	adc	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	a2 17       	cp	r26, r18
 27a:	b3 07       	cpc	r27, r19
 27c:	e4 07       	cpc	r30, r20
 27e:	f5 07       	cpc	r31, r21
 280:	20 f0       	brcs	.+8      	; 0x28a <__udivmodsi4_ep>
 282:	a2 1b       	sub	r26, r18
 284:	b3 0b       	sbc	r27, r19
 286:	e4 0b       	sbc	r30, r20
 288:	f5 0b       	sbc	r31, r21

0000028a <__udivmodsi4_ep>:
 28a:	66 1f       	adc	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	1a 94       	dec	r1
 294:	69 f7       	brne	.-38     	; 0x270 <__udivmodsi4_loop>
 296:	60 95       	com	r22
 298:	70 95       	com	r23
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	bd 01       	movw	r22, r26
 2a4:	cf 01       	movw	r24, r30
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
