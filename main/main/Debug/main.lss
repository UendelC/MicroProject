
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096e  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000745  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049b  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037b  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000214b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configUsart>:
  result[4] = decimal/100 + 48;
  result[5] = (decimal%100)/10 + 48;
  result[6] = decimal%10 + 48;
  result[7] = '\n';
  result[8] = '\0';
}
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a0:	08 95       	ret

000000a2 <configADC>:
  a2:	87 e8       	ldi	r24, 0x87	; 135
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  a8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  ac:	08 95       	ret

000000ae <readLM35>:
  ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 ff       	sbrs	r24, 4
  c0:	fd cf       	rjmp	.-6      	; 0xbc <readLM35+0xe>
  c2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ca:	3f ef       	ldi	r19, 0xFF	; 255
  cc:	43 ec       	ldi	r20, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	31 50       	subi	r19, 0x01	; 1
  d2:	40 40       	sbci	r20, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <readLM35+0x22>
  d8:	00 c0       	rjmp	.+0      	; 0xda <readLM35+0x2c>
  da:	00 00       	nop
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	90 61       	ori	r25, 0x10	; 16
  e4:	90 83       	st	Z, r25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	92 2b       	or	r25, r18
  ea:	08 95       	ret

000000ec <convertToPercentage>:

void convertToPercentage(int data) {
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  double lum = data; // 100 * (100.0 / 1023) * data;

  int inteira = (int) lum / 100;
  f2:	64 e6       	ldi	r22, 0x64	; 100
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
  fa:	16 2f       	mov	r17, r22
  fc:	d7 2f       	mov	r29, r23
  int decimal = ((int) lum) % 100;
  fe:	c8 2f       	mov	r28, r24
 100:	49 2f       	mov	r20, r25
  result[0] = inteira/1000 ? inteira/1000 + 48 : ' ';
 102:	69 51       	subi	r22, 0x19	; 25
 104:	7c 4f       	sbci	r23, 0xFC	; 252
 106:	6f 3c       	cpi	r22, 0xCF	; 207
 108:	77 40       	sbci	r23, 0x07	; 7
 10a:	10 f4       	brcc	.+4      	; 0x110 <convertToPercentage+0x24>
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	01 c0       	rjmp	.+2      	; 0x112 <convertToPercentage+0x26>
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  result[1] = (inteira % 1000)/100 ? (inteira % 1000)/100 + 48 : ' ';
 116:	81 2f       	mov	r24, r17
 118:	9d 2f       	mov	r25, r29
 11a:	68 ee       	ldi	r22, 0xE8	; 232
 11c:	73 e0       	ldi	r23, 0x03	; 3
 11e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
 122:	9c 01       	movw	r18, r24
 124:	2d 59       	subi	r18, 0x9D	; 157
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	27 3c       	cpi	r18, 0xC7	; 199
 12a:	31 05       	cpc	r19, r1
 12c:	30 f0       	brcs	.+12     	; 0x13a <convertToPercentage+0x4e>
 12e:	64 e6       	ldi	r22, 0x64	; 100
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
 136:	60 5d       	subi	r22, 0xD0	; 208
 138:	01 c0       	rjmp	.+2      	; 0x13c <convertToPercentage+0x50>
 13a:	60 e2       	ldi	r22, 0x20	; 32
 13c:	e0 e0       	ldi	r30, 0x00	; 0
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	61 83       	std	Z+1, r22	; 0x01
  result[2] = (inteira % 100)/10 + 48;
 142:	81 2f       	mov	r24, r17
 144:	9d 2f       	mov	r25, r29
 146:	64 e6       	ldi	r22, 0x64	; 100
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
 14e:	2a e0       	ldi	r18, 0x0A	; 10
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
 158:	60 5d       	subi	r22, 0xD0	; 208
 15a:	62 83       	std	Z+2, r22	; 0x02
  result[3] = inteira % 10 + 48;
 15c:	81 2f       	mov	r24, r17
 15e:	9d 2f       	mov	r25, r29
 160:	b9 01       	movw	r22, r18
 162:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	83 83       	std	Z+3, r24	; 0x03
  result[4] = ',';
 16a:	8c e2       	ldi	r24, 0x2C	; 44
 16c:	84 83       	std	Z+4, r24	; 0x04
  result[5] = decimal/10 + 48;
 16e:	8c 2f       	mov	r24, r28
 170:	94 2f       	mov	r25, r20
 172:	b9 01       	movw	r22, r18
 174:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodhi4>
 178:	60 5d       	subi	r22, 0xD0	; 208
 17a:	65 83       	std	Z+5, r22	; 0x05
  result[6] = '%';
 17c:	85 e2       	ldi	r24, 0x25	; 37
 17e:	86 83       	std	Z+6, r24	; 0x06
  result[7] = '\n';
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	87 83       	std	Z+7, r24	; 0x07
  result[8] = '\0';
 184:	10 86       	std	Z+8, r1	; 0x08
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	08 95       	ret

0000018e <send_>:

void send_(char * mensagem) {
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
  int i = 0;
  while(mensagem[i]) {
 192:	fc 01       	movw	r30, r24
 194:	20 81       	ld	r18, Z
 196:	22 23       	and	r18, r18
 198:	79 f0       	breq	.+30     	; 0x1b8 <send_+0x2a>
 19a:	dc 01       	movw	r26, r24
 19c:	11 96       	adiw	r26, 0x01	; 1
    while(!(UCSR0A & (1 << UDRE0))){}
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
    UDR0 = (unsigned char)mensagem[i];
 1a2:	c6 ec       	ldi	r28, 0xC6	; 198
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
    UCSR0A = 0x40; 
 1a6:	80 e4       	ldi	r24, 0x40	; 64
}

void send_(char * mensagem) {
  int i = 0;
  while(mensagem[i]) {
    while(!(UCSR0A & (1 << UDRE0))){}
 1a8:	90 81       	ld	r25, Z
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <send_+0x1a>
    UDR0 = (unsigned char)mensagem[i];
 1ae:	28 83       	st	Y, r18
    UCSR0A = 0x40; 
 1b0:	80 83       	st	Z, r24
  result[8] = '\0';
}

void send_(char * mensagem) {
  int i = 0;
  while(mensagem[i]) {
 1b2:	2d 91       	ld	r18, X+
 1b4:	21 11       	cpse	r18, r1
 1b6:	f8 cf       	rjmp	.-16     	; 0x1a8 <send_+0x1a>
    while(!(UCSR0A & (1 << UDRE0))){}
    UDR0 = (unsigned char)mensagem[i];
    UCSR0A = 0x40; 
    i++;
  }
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <main>:

int main(void)
{
  configADC();
 1be:	0e 94 51 00 	call	0xa2	; 0xa2 <configADC>
  configUsart();
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <configUsart>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	83 ed       	ldi	r24, 0xD3	; 211
 1ca:	90 e3       	ldi	r25, 0x30	; 48
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0xe>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x18>
 1d6:	00 00       	nop
  int temperatura;
  //int luminosidade;
    while (1) 
    {
      _delay_ms(1000);
      temperatura = readLM35();
 1d8:	0e 94 57 00 	call	0xae	; 0xae <readLM35>
      convertToPercentage(temperatura);
 1dc:	0e 94 76 00 	call	0xec	; 0xec <convertToPercentage>
//      convertToCelsiusStr(temperatura);
      send_(result);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 c7 00 	call	0x18e	; 0x18e <send_>
 1e8:	ee cf       	rjmp	.-36     	; 0x1c6 <main+0x8>

000001ea <__divmodhi4>:
 1ea:	97 fb       	bst	r25, 7
 1ec:	07 2e       	mov	r0, r23
 1ee:	16 f4       	brtc	.+4      	; 0x1f4 <__divmodhi4+0xa>
 1f0:	00 94       	com	r0
 1f2:	07 d0       	rcall	.+14     	; 0x202 <__divmodhi4_neg1>
 1f4:	77 fd       	sbrc	r23, 7
 1f6:	09 d0       	rcall	.+18     	; 0x20a <__divmodhi4_neg2>
 1f8:	0e 94 09 01 	call	0x212	; 0x212 <__udivmodhi4>
 1fc:	07 fc       	sbrc	r0, 7
 1fe:	05 d0       	rcall	.+10     	; 0x20a <__divmodhi4_neg2>
 200:	3e f4       	brtc	.+14     	; 0x210 <__divmodhi4_exit>

00000202 <__divmodhi4_neg1>:
 202:	90 95       	com	r25
 204:	81 95       	neg	r24
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	08 95       	ret

0000020a <__divmodhi4_neg2>:
 20a:	70 95       	com	r23
 20c:	61 95       	neg	r22
 20e:	7f 4f       	sbci	r23, 0xFF	; 255

00000210 <__divmodhi4_exit>:
 210:	08 95       	ret

00000212 <__udivmodhi4>:
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	51 e1       	ldi	r21, 0x11	; 17
 218:	07 c0       	rjmp	.+14     	; 0x228 <__udivmodhi4_ep>

0000021a <__udivmodhi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	a6 17       	cp	r26, r22
 220:	b7 07       	cpc	r27, r23
 222:	10 f0       	brcs	.+4      	; 0x228 <__udivmodhi4_ep>
 224:	a6 1b       	sub	r26, r22
 226:	b7 0b       	sbc	r27, r23

00000228 <__udivmodhi4_ep>:
 228:	88 1f       	adc	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	5a 95       	dec	r21
 22e:	a9 f7       	brne	.-22     	; 0x21a <__udivmodhi4_loop>
 230:	80 95       	com	r24
 232:	90 95       	com	r25
 234:	bc 01       	movw	r22, r24
 236:	cd 01       	movw	r24, r26
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
